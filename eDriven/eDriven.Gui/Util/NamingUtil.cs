using System;
using System.Collections.Generic;
using eDriven.Core.Managers;
using eDriven.Gui.Components;
using UnityEngine;
using Component=eDriven.Gui.Components.Component;

namespace eDriven.Gui.Util
{
    /// <summary>
    /// Coded by Danko Kozar
    /// </summary>
    public static class NamingUtil
    {
#if DEBUG
        // ReSharper disable UnassignedField.Global
        public static bool DebugMode;
        // ReSharper restore UnassignedField.Global
#endif

        public static int Count;

        private static readonly Dictionary<Type, int> NameDict = new Dictionary<Type, int>();
        private static readonly Dictionary<Type, int> UidDict = new Dictionary<Type, int>();

        internal static void Initialize()
        {
            NameDict.Clear();
            UidDict.Clear();
        }

        public static string CreateUniqueName(object obj) // TODO: Optimize
        {
            if (null == obj)
                return null;

            Type type = obj.GetType();
            int count = 0; // default
            
            if (NameDict.ContainsKey(type))
            {
                count = NameDict[type];
            }

            //Debug.Log("Creating name for type: " + typeof(object));

            count++;
            NameDict[type] = count;

            //Debug.Log("     -> " + string.Format("{0}{1}", type.Name, count));

            //Debug.Log("CreateUniqueName: " + type);

            var name = type.Name;

            // If the class name ends with a digit (which some autogenerated
            // classes do), then append an underscore before appending
            // the counter.
            int charCode = name[name.Length - 1];
            if (charCode >= 48 && charCode <= 57)
                name += "_";

            return string.Format("{0}{1}", name, count);
        }

        public static string CreateUid(DisplayListMember component)
        {
            if (null == component)
                return null;

            Type type = component.GetType();
            int count = 0; // default

            if (UidDict.ContainsKey(type))
            {
                count = UidDict[type];
            }

            count++;
            UidDict[type] = count;

            var name = type.Name;

            // If the class name ends with a digit (which some autogenerated
            // classes do), then append an underscore before appending
            // the counter.
            int charCode = name[name.Length - 1];
            if (charCode >= 48 && charCode <= 57)
                name += "_";

            return string.Format("{0}{1}", name, count);
        }

        public static string HierarchyToString(Component displayListMember)
        {
            //Debug.Log("HierarchyAsString");

            string result = null;

            // Play at the specified object and walk up the parent chain
            // to build up the string to return.
            try
            {
                for (Component control = displayListMember; control != null; control = (Component) control.Parent)
                {
                    result = (null == result) ? control.Uid : control.Uid + "." + result;
                    
                    // If this object is in the display tree,
                    // stop after we've prepended the topmost Stage instance.
                    //if (null != control.Owner && null != control.Stage && control.Owner == control.Stage)
                    //{
                    //    //result = control.Uid;
                    //    break;
                    //}
                }
            }
            catch (Exception ex)
            {
                Debug.Log("Error: " + ex);
            }

            return result ?? displayListMember.Uid ?? "?";
        }

        /// <summary>
        /// Returns the string presentation of the component
        /// </summary>
        /// <param name="displayObject"></param>
        /// <returns></returns>
        public static string DisplayListMemberToString(DisplayListMember displayObject)
        {
            //Debug.Log("######## DisplayListMemberToString: " + displayObject.GetType() + "/" + displayObject.Name);

            #region Commented on 20130313 because wiring up ID from the Adapter

            string result = null;

            for (DisplayListMember control = displayObject;
                 control != null;
                 control = control.Parent)
            {
                // If this object is in the display tree,
                // stop after we've prepended the topmost Application instance.
                //if (null != control.Owner 
                //    && null != control.Stage 
                //    && control.Owner == control.Stage)
                //    break;

                // Prefer id over name if specified.
                //string s = "id" in o && o["id"] ? o["id"] : o.name;

                //string s = control.Uid ?? control.Name;

                string name = control.Name;
                if (!string.IsNullOrEmpty(control.Id))
                    name = string.Format("{0}[{1}]", name, control.Id);

                result = (null == result) ? name : name + "." + result;
            }

            return result;

            #endregion

            //string result = displayObject.ToString();

            //if (!string.IsNullOrEmpty(displayObject.Id))
            //    result += string.Format(@" [Id=""{0}""]", displayObject.Id);

            //return result;
        }
    }
}